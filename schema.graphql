type User @entity {
  id: Bytes! # address
  totalStaked: BigInt!
  totalWithdrawn: BigInt!
  totalRewardsClaimed: BigInt!
  stakePositions: [StakePosition!]! @derivedFrom(field: "user")
  stakes: [Staked!]! @derivedFrom(field: "user")
  withdrawals: [Withdrawn!]! @derivedFrom(field: "user")
  rewardClaims: [RewardsClaimed!]! @derivedFrom(field: "user")
  emergencyWithdrawals: [EmergencyWithdrawn!]! @derivedFrom(field: "user")
  pendingRewards: BigInt!
  lastUpdateTimestamp: BigInt!
}

type Staked @entity(immutable: true) {
  id: Bytes!
  user: User! # address
  amount: BigInt! # uint256
  timestamp: BigInt! # uint256
  newTotalStaked: BigInt! # uint256
  currentRewardRate: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StakePosition @entity {
  id: ID!
  user: User!
  amount: BigInt!
  timestamp: BigInt!
  isWithdrawn: Boolean!
  withdrawnTimestamp: BigInt
  rewardsClaimed: BigInt!
  lastClaimTimestamp: BigInt
  unlockTime: BigInt!
  pendingRewards: BigInt!
}

type StakingInitialized @entity(immutable: true) {
  id: Bytes!
  stakingToken: Bytes! # address
  initialRewardRate: BigInt! # uint256
  timestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EmergencyWithdrawn @entity(immutable: true) {
  id: Bytes!
  user: User! # address
  amount: BigInt! # uint256
  penalty: BigInt! # uint256
  timestamp: BigInt! # uint256
  newTotalStaked: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RewardRateUpdated @entity(immutable: true) {
  id: Bytes!
  oldRate: BigInt! # uint256
  newRate: BigInt! # uint256
  timestamp: BigInt! # uint256
  totalStaked: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RewardsClaimed @entity(immutable: true) {
  id: Bytes!
  user: User! # address
  amount: BigInt! # uint256
  timestamp: BigInt! # uint256
  newPendingRewards: BigInt! # uint256
  totalStaked: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Withdrawn @entity(immutable: true) {
  id: Bytes!
  user: User! # address
  amount: BigInt! # uint256
  timestamp: BigInt! # uint256
  newTotalStaked: BigInt! # uint256
  currentRewardRate: BigInt! # uint256
  rewardsAccrued: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProtocolMetrics @entity {
  id: ID!
  totalStaked: BigInt!
  totalUsers: BigInt!
  totalStakePositions: BigInt!
  currentRewardRate: BigInt!
  totalRewardsClaimed: BigInt!
  totalWithdrawn: BigInt!
  apr: BigInt!
  lastUpdateTimestamp: BigInt!
  stakingToken: Bytes!
}
